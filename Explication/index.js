function somar (argumento1 , argumento2){
  return argumento1 + argumento2; 
} 

exports.somar = somar; 


const calculadora = require ("../models/calculadora.js")

test ("Somar Dois Mais Dois, Deveria Ser 4!" , () => {
const resultado = calculadora.somar (100, 99); 
expect(resultado).toBe(1) 
console.log ("A Soma Das Variaveis: Numero1 - Numero2, E Igual a: 1!")
})


/* Codigo Destrinchado  

Fun√ß√£o Somar

function somar (argumento1 , argumento2){
  return argumento1 + argumento2;
}
exports.somar = somar;

Explicacao!

O que faz:
- Define uma fun√ß√£o chamada somar que recebe dois par√¢metros: argumento1 e argumento2.
- Ela retorna diretamente a soma desses dois valores.
- Depois, usa exports.somar = somar para tornar a fun√ß√£o dispon√≠vel em outros arquivos. Ou seja, outro arquivo pode importar e usar essa fun√ß√£o com require().
üëâ Ponto de aten√ß√£o: Essa fun√ß√£o n√£o valida os tipos dos argumentos. Se passar uma string por engano, ela pode concatenar em vez de somar!

--------------------------------------------------------------------------------------

Importa√ß√£o e In√≠cio Dos Teste

const calculadora = require ("../models/calculadora.js")

Explicacao!

- Aqui estamos importando o m√≥dulo onde a fun√ß√£o somar foi definida.
- O caminho "../models/calculadora.js" indica que o arquivo est√° um n√≠vel acima, dentro da pasta models.

--------------------------------------------------------------------------------------
 Caso de teste com test()
test ("Somar Dois Mais Dois, Deveria Ser 4!" , () => {
  const resultado = calculadora.somar(100, 99);
  expect(resultado).toBe(1);
  console.log("A Soma Das Variaveis: Numero1 - Numero2, E Igual a: 1!");
})

Explicaco

- test() √© uma fun√ß√£o do framework Jest usada para criar um teste automatizado.
- O primeiro argumento √© a descri√ß√£o do teste: "Somar Dois Mais Dois, Deveria Ser 4!". Mas veja que essa descri√ß√£o est√° inconsistente com os valores testados (100 + 99).
- Dentro do test, a fun√ß√£o que testamos √© chamada: calculadora.somar(100, 99) e o resultado √© guardado em resultado.
- Em seguida, expect(resultado).toBe(1) verifica se o resultado √© exatamente 1. Isso vai falhar, pois 100 + 99 √© 199.
- Por fim, console.log(...) imprime uma mensagem informando o que foi somado ‚Äî mas novamente, h√° um erro l√≥gico: a soma real n√£o √© 1.

üõ†Ô∏è Dica de corre√ß√£o do teste:
Para que o teste fa√ßa sentido:
test("Somar 100 + 99 deve resultar em 199", () => {
  const resultado = calculadora.somar(100, 99);
  expect(resultado).toBe(199);
  console.log("A soma das vari√°veis: 100 + 99 √© igual a: " + resultado);
});

--------------------------------------------------------------------------------------

*/